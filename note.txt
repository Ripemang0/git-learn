创建分支
1.      git checkout 分支名  --创建分支
        git branch 分支名    --切换分支
2.      git checkout -b 分支名 --快速创建切换分支
合并分支
1.      切换到目标分支
        git merge 被合并分支
HEAD 始终指向该分支最新一次提交

050 git stash命令的使用
用于将临时变更不跟踪，也不保存的临时存储起来，以栈的方式进行，先进后出
git stash 将目前变更入栈
git stash apply 读取栈顶变更
使用git stash apply 索引号 读取缓存时必须处于最初未更改状态，即将目前读取的stash进行压栈
git stash list 查看目前stash列表
git stash push -m ""压栈时带有信息
git stash pop 索引号 弹出读取栈中数据，与apply不同栈中数据直接删除 apply会保留
stash删除命令  git stash drop 索引号 ；git stash clear

reflog的使用
恢复被删除的提交或分支
git reflog查看近30天的修改提交记录
git reset --hard HEAD~步数，删除硬删除
git reset --hard 哈希值 恢复
删除分支 git branch -D name


git checkout 哈希值 分离帽 (被删除分支提交的哈希值，没有新提交的分支直接重新创建)
创建一个新分支 git branch name
git checkout name
or git checkout -b name
or git switch -c name

分支合并
the fast-forward merge
主分支没有新的提交，分支合并。不创建新的提交，将主分支head指向，feature合并的提交head
git merge branchname 不创建新提交头直接指向分支的最新提交
git merge --squash branchname 即将合并的分支放到status里，在使用commit提交。即将feature的所有提交整合为一个提交，提交到主分支
tne non fast-forward merge 
recursive merge
e.1 git merge --no-ff merge
分支每次提交被合并+1次总操作整合提交
当合并，主分支有新的提交的分支时默认 recursive merge
主分支最新提交在次分支合并提交之前
git merge --squash branchname 同上 分支所有提交整合为一个提交到status区自行提交

rebase指令
在feature分支中使用rebase指令，进行基变变换，使master最新提交更新到feature中
场景：不需要额外提交总commit，分支需要用到master新提交的功能。
变换后可以使用 fast forward合并，不产生额外commit
rebase后之前的分支提交 id会变换，公共库需要注意

合并冲突
git log --merge 合并日志
git diff
解决后需要自行添加并提交
vscode有适应改变

git cherry-pick hash 
只提交分支的某个提交到主分支，两次提交id不同
会造成重复提交

标签
git tag 列出所有标签
git show tagName 展示tagname
标签可以使用checkout直接访问分离头
git tag tagName hash 创建轻量级标签
git tag tagName -a tagName -m "" 创建带注释的标签
git tag -d tagName 删除标签

